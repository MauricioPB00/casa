// aula 3 ----- primitivas programa minimo
//////////////////////////////////////////

#include <stdlib.h>
#include <GL/glut.h>

int janela_largura = 400;
int janela_altura = 400;

void keyboard(unsigned char key, int x, int y);
void resize(GLsizei w, GLsizei h);
void display(void);


int main(int argc, char** argv)
{

    glutInit(&argc, argv);  // controla se o sistema operacional tem suporte a janelas.

    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);  // quantidade de buffer de cores e que o padrao de cores é RGB ou RGBA

    glutInitWindowSize(400, 400);  // tamanho da janela

    //glutFullScreen();  // full screen

    glutInitWindowPosition(10, 300); // posicao inicial da janela

    glutCreateWindow("GLUT Test wagner---- exercicio de glut");   /// cria a janela

    glutKeyboardFunc(&keyboard); //chama teclado

    glutReshapeFunc(&resize); // configura a tela

    glutDisplayFunc(display);

    glutMainLoop(); //redesenhar 

    return EXIT_SUCCESS;
}


void keyboard(unsigned char key, int x, int y)
{
    switch (key)
    {
    case '\x1B':
        exit(EXIT_SUCCESS);
        break;
    }
}

void resize(GLsizei w, GLsizei h)
{

    if (h == 0) h = 1;  // Evita a divisao por zero

    glViewport(0, 0, w, h);  // Especifica as dimensões da Viewport

   // Inicializa o sistema de coordenadas
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    // Estabelece a janela de seleção (left, right, bottom, top)
    if (w <= h)
    {
        gluOrtho2D(0.0f, 400.0f, 0.0f, 400.0f * h / w);
    }
    else
    {
        gluOrtho2D(0.0f, 400.0f * w / h, 0.0f, 400.0f);
    }
    glMatrixMode(GL_MODELVIEW);


}
void Porta() {
    glBegin(GL_QUADS); // CASA
    glColor3f(0.0f, 1.0f, 1.0f);//cor
    glVertex2f(110, -200);
    glVertex2f(150, -200);
    glVertex2f(150, -80);
    glVertex2f(110, -80);

    glEnd();
}


void Casa() {
    glBegin(GL_QUADS); // CASA
    glColor3f(1.0f, 0.0f, 0.0f);//cor
    glVertex2f(80, -180);
    glVertex2f(180, -200);
    glVertex2f(180, 0);
    glVertex2f(80, 0);


    glEnd();
}
void Janela() {
    glBegin(GL_QUADS); // CASA
    glColor3f(1.0f, 1.0f, 1.0f);//cor
    glVertex2f(100, -60);
    glVertex2f(160, -60);
    glVertex2f(160, -20);
    glVertex2f(100, -20);
    glEnd();
}
void Janela2() {
    glBegin(GL_QUADS); // CASA
    glColor3f(0.0f, 0.0f, 0.0f);//cor
    glVertex2f(128, -60);
    glVertex2f(132, -60);
    glVertex2f(132, -20);
    glVertex2f(128, -20);
    glEnd();
}
void Janela3() {
    glBegin(GL_QUADS); // CASA
    glVertex2f(100, -38);
    glVertex2f(160, -38);
    glVertex2f(160, -42);
    glVertex2f(100, -42);
    glEnd();
}
void telhado2() {
    glBegin(GL_POLYGON); // CASA
    glColor3f(0.0f, 0.0f, 0.0f);//cor
    glVertex2f(50, 0);
    glVertex2f(130, 60);
    glVertex2f(210, 0);
    glEnd();
}
void churrasqueira() {
    glBegin(GL_QUADS); // CASA
    glColor3f(1.0f, 0.0f, 0.0f);//cor
    glVertex2f(70, 10);
    glVertex2f(100, 10);
    glVertex2f(100, 70);
    glVertex2f(70, 70);
    glEnd();
}
void arvore1() {
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);//cor
    glVertex2f(-80, -200);
    glVertex2f(-60, -200);
    glVertex2f(-60, -30);
    glVertex2f(-80, -30);
    glEnd();
}
void arvore2() {
    glBegin(GL_POLYGON); // CASA
    glColor3f(0.0f, 1.0f, 0.0f);//cor
    glVertex2f(-110, -30);
    glVertex2f(-70, 70);
    glVertex2f(-30, -30);
    glEnd();

}
void chao() {
    glBegin(GL_QUADS); // chao
    glColor3f(0.0f, 2.0f, 0.0f);//cor
    glVertex2f(-200.0, -170);//esquerda cima 
    glVertex2f(-200, -200);//esquerda baixo
    glVertex2f(200.0, -200.0); //direira baixo
    glVertex2f(200, -170.0);//direita cima
    glEnd();
}

void display()
{
    glMatrixMode(GL_MODELVIEW);//cordenadas
    glLoadIdentity();//limpar a matriz
    glClearColor(5.0f, 10.0f, 15.0f, 10.0f);  // cor do fundo

    glTranslatef(janela_largura / 2, janela_altura / 2, 0.0f);

    glClear(GL_COLOR_BUFFER_BIT);  // limpa a tela com a cor do fundo
    Casa();
    Porta();
    Janela();
    Janela2();
    Janela3();
    arvore1();
    churrasqueira();
    telhado2();
    arvore2();
    chao();
    glFlush(); // executa o desenho
}
